# - name: Deploy Docker Containers on EC2
#   hosts: webserver
#   become: true
#   vars:
#     frontend_image: "uresha2001/frontend:{{ tag }}"
#     backend_image: "uresha2001/backend:{{ tag }}"
#     mongo_image: "uresha2001/mongo:{{ tag }}"

#   tasks:
#     - name: Ensure Docker is installed
#       apt:
#         name: docker.io
#         state: present
#         update_cache: true

#     - name: Install Python Docker SDK
#       pip:
#         name: docker
#         state: present

#     - name: Pull Docker images
#       docker_image:
#         name: "{{ item }}"
#         source: pull
#       loop:
#         - "{{ frontend_image }}"
#         - "{{ backend_image }}"
#         - "{{ mongo_image }}"

#     - name: Stop and remove existing containers
#       docker_container:
#         name: "{{ item }}"
#         state: absent
#         force_kill: true
#       loop:
#         - frontend_container
#         - backend_container
#         - mongo_container

#     # - name: Start MongoDB container
#   docker_container:
#     name: mongo_container
#     image: "{{ mongo_image }}"
#     state: started
#     restart_policy: always
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongo_data:/data/db

# - name: Wait for MongoDB
#   wait_for:
#     port: 27017
#     delay: 10

# - name: Start backend container
#   docker_container:
#     name: backend_container
#     image: "{{ backend_image }}"
#     state: started
#     restart_policy: always
#     ports:
#       - "3001:3001"
#     environment:
#       MONGO_URI: "mongodb://mongo_container:27017/gymdb"
#       PORT: 3001

# - name: Start frontend container
#   docker_container:
#     name: frontend_container
#     image: "{{ frontend_image }}"
#     state: started
#     restart_policy: always
#     ports:
#       - "80:5173"  # Map port 80 to container's 5173
#     environment:
#       VITE_API_URL: "http://localhost:3001"  # Or your backend public IP

# - name: Deploy Docker Containers on EC2
#   hosts: webserver
#   become: true
#   vars:
#     frontend_image: "uresha2001/frontend:{{ tag }}"
#     backend_image: "uresha2001/backend:{{ tag }}"
#     mongo_image: "uresha2001/mongo:{{ tag }}"

#   tasks:
#     - name: Ensure Docker is installed
#       apt:
#         name: docker.io
#         state: present
#         update_cache: true

#     - name: Install pip3
#       apt:
#         name: python3-pip
#         state: present

#     - name: Install Python Docker SDK
#       pip:
#         name: docker
#         state: present

#     - name: Pull Docker images
#       docker_image:
#         name: "{{ item }}"
#         source: pull
#       loop:
#         - "{{ frontend_image }}"
#         - "{{ backend_image }}"
#         - "{{ mongo_image }}"

#     - name: Stop and remove existing containers
#       docker_container:
#         name: "{{ item }}"
#         state: absent
#         force_kill: true
#       loop:
#         - frontend_container
#         - backend_container
#         - mongo_container

#     - name: Start MongoDB container
#       docker_container:
#         name: mongo_container
#         image: "{{ mongo_image }}"
#         state: started
#         restart_policy: always
#         ports:
#           - "27017:27017"
#         volumes:
#           - mongo_data:/data/db

#     - name: Wait for MongoDB
#       wait_for:
#         port: 27017
#         delay: 10
#         timeout: 30

#     - name: Start backend container
#       docker_container:
#         name: backend_container
#         image: "{{ backend_image }}"
#         state: started
#         restart_policy: always
#         ports:
#           - "3001:3001"
#         env:
#           MONGO_URI: "mongodb://mongo_container:27017/gymdb"
#           PORT: 3001

#     - name: Start frontend container
#       docker_container:
#         name: frontend_container
#         image: "{{ frontend_image }}"
#         state: started
#         restart_policy: always
#         ports:
#           - "80:5173"
#         env:
#           VITE_API_URL: "http://localhost:3001"

- name: Deploy Docker Containers on EC2
  hosts: webserver
  become: true
  vars:
    frontend_image: "uresha2001/frontend:{{ tag }}"
    backend_image: "uresha2001/backend:{{ tag }}"
    mongo_image: "uresha2001/mongo:{{ tag }}"

  tasks:
    - name: Install required system packages
      yum:
        name:
          - docker
          - python3-pip
        state: present
      notify: Start Docker

    - name: Install Python Docker SDK
      pip:
        name: docker
        state: present

    - name: Ensure Docker volume exists
      docker_volume:
        name: mongo_data
        state: present

    - name: Pull Docker images
      docker_image:
        name: "{{ item }}"
        source: pull
      loop:
        - "{{ frontend_image }}"
        - "{{ backend_image }}"
        - "{{ mongo_image }}"

    - name: Stop and remove existing containers
      docker_container:
        name: "{{ item }}"
        state: absent
        force_kill: true
      loop:
        - frontend_container
        - backend_container
        - mongo_container

    - name: Start MongoDB container
      docker_container:
        name: mongo_container
        image: "{{ mongo_image }}"
        state: started
        restart_policy: always
        ports:
          - "27017:27017"
        volumes:
          - mongo_data:/data/db

    - name: Wait for MongoDB
      wait_for:
        port: 27017
        delay: 10
        timeout: 60

    - name: Start backend container
      docker_container:
        name: backend_container
        image: "{{ backend_image }}"
        state: started
        restart_policy: always
        ports:
          - "3001:3001"
        env:
          MONGO_URI: "mongodb://mongo_container:27017/gymdb"
          PORT: 3001
        links:
          - mongo_container

    - name: Start frontend container
      docker_container:
        name: frontend_container
        image: "{{ frontend_image }}"
        state: started
        restart_policy: always
        ports:
          - "80:5173"
        env:
          VITE_API_URL: "http://backend_container:3001"

  handlers:
    - name: Start Docker
      systemd:
        name: docker
        state: started
        enabled: yes